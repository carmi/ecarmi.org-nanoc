#!/usr/bin/env ruby

# Load settings
require './settings.rb' # There should be a settings.rb in root derived from dev or prod settings
require 'bourbon'
require 'time'
require './sass_config.rb'
require 'benchmark'

# A few helpful tips about the Rules file:
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

compile '/static/fonts/*/' do
end

# don't filter SASS partials
compile %r{/static/css/.*_.+/$} do
  nil
end

# don't route SASS partials
route %r{/static/css/.*_.+/$} do
  nil
end

compile '/static/css/*' do
  if @item[:extension] =~ /sass$/
    filter :sass, $sass_configuration
  end

  if $use_minified_css then
    # compress css with rainpress
    filter :rainpress
  end
end

route '/static/fonts/*' do
  item.identifier.gsub(/_/, '.').chomp('/')
end

route '/static/css/*/' do
  hashed_route(@item)
end

compile '/static/js/*/' do
  if item[:combined]
    filter :haml
    #filter :yui_compress unless $development_mode
  end
end

route '/static/js/*/' do
  if item[:combined]
    #if combined haml, route to js file
    hashed_route(@item)
  else
    path = @item.identifier.chop
    path + '.' + @item[:extension]
  end
end

compile '/static/img/*/' do
  #don't compile static resources
end

route '/static/img/*/' do
  item.identifier.chop + '.' + item[:extension]
end

compile '/files/*/' do
  # Do nothing
end

route '/files/*/' do
  # Make sure that "/files/thing/" becomes "/files/thing.mp4"
  item.identifier.gsub(/^\/files/, '').chop + '.' + item[:extension]
end


# Humans.txt
compile '/humans/' do
end

route '/humans/' do
  '/humans.txt'
end

# Robots.txt
compile '/robots/' do
end

route '/robots/' do
  '/robots.txt'
end

# Sitemap
compile '/sitemap/' do
  filter :haml
end

route '/sitemap/' do
  '/sitemap.xml'
end

# Atom Feed
compile '/writing/feed/' do
  filter :haml
end

route '/writing/feed/' do
  '/writing/feed.xml'
end

route '/writing/*/' do
  "/writing/#{item[:slug]}/index.html"
end

compile '/writing/*/' do
  if @item[:markup] == "markdown"
    filter :kramdown
    filter :colorize_syntax, {
      # To use the default_colorizer option you need the nanoc3.2 version Colorize_Syntax filter.
      :default_colorizer => :pygmentize,
    }
  end

  filter :rubypants
  layout 'post'
  layout 'base'
end

compile '/books/*/' do
  if @item[:markup] == "markdown"
    filter :kramdown
    filter :colorize_syntax, {
      # To use the default_colorizer option you need the nanoc3.2 version Colorize_Syntax filter.
      :default_colorizer => :pygmentize,
    }
  end

  layout 'book'
  layout 'header'
  layout 'base'
end

#create markdown text copies of all entries
route '/writing/*/', :rep => :raw do
  if @item[:markup] == 'markdown'
    "/writing/#{@item[:slug]}.markdown"
  end
end

compile '/writing/*/', :rep => :raw do
  #don't compile
end

compile '/writing/' do
  layout 'writing_root'
  layout 'header'
  layout 'base'
end

compile '/portfolio/' do
  filter :haml
  layout 'header'
  layout 'base'
end

compile '/' do
  layout 'homepage'
  layout 'base'
end

compile '/404/' do
  filter :haml
  layout 'header'
  layout 'base'
end

compile '*' do
  if @item[:markup] == "markdown"
    filter :kramdown
    filter :colorize_syntax, {
      # To use the default_colorizer option you need the nanoc3.2 version Colorize_Syntax filter.
      :default_colorizer => :pygmentize,
    }
  elsif @item[:markup] == "haml"
    filter :haml
  end
  layout 'generic'
  layout 'header'
  layout 'base'
end

route '*' do
  item.identifier + 'index.html'
end

# Set :ugly=true for correct indentation for <pre>.
layout '*', :haml, :format => :html5, :ugly => true
