#!/usr/bin/env ruby

# Load settings
require './settings'
require 'compass'
require 'time'

Compass.add_project_configuration 'compass_config.rb'

# A few helpful tips about the Rules file:
#
# * The order of rules is important: for each item, only the first matching
#   rule is applied.
#
# * Item identifiers start and end with a slash (e.g. “/about/” for the file
#   “content/about.html”). To select all children, grandchildren, … of an
#   item, use the pattern “/about/*/”; “/about/*” will also select the parent,
#   because “*” matches zero or more characters.

compile '/static/css/*/' do
  if @item[:extension] == 'sass'
    filter :sass, Compass.sass_engine_options
  end

  if $use_minified_css then
    # compress css with rainpress
    filter :rainpress
  end
end

route '/static/css/*/' do
  path = @item.identifier.chop
  path + '.css'
end

compile '/static/js/*/' do
  #TODO, minify js
end

route '/static/js/*/' do
  path = @item.identifier.chop
  path + '.' + @item[:extension]
end

compile '/static/img/*/' do
  #don't compile static resources
end

route '/static/img/*/' do
  item.identifier.chop + '.' + item[:extension]
end

compile '/files/*/' do
  #don't compile files
end

# Sitemap
compile '/sitemap/' do
  filter :haml
end

route '/sitemap/' do
  '/sitemap.xml'
end

# Atom Feed
compile '/writing/feed/' do
  filter :haml
end

route '/writing/feed/' do
  '/writing/feed.xml'
end

compile '/writing/*/' do
  if @item[:markup] == "markdown"
    filter :kramdown
    filter :colorize_syntax, {
      # To use the default_colorizer option you need the nanoc3.2 version Colorize_Syntax filter.
      :default_colorizer => :pygmentize,
    }
  end
  if item[:created_at]
    t = Time.parse(item[:created_at])
    item[:print_time] = t.strftime("%B %e, %Y")
    item[:timeago] = t.utc.iso8601.to_s
  end

  filter :rubypants
  layout 'post'
  layout 'default'
end

#create markdown text copies of all entries
route '/writing/*/', :rep => :raw do
  @item.identifier + 'index.markdown'
end

compile '/writing/*/', :rep => :raw do
end

compile '/writing/' do
  rep.item.children.each do |article|
    if article[:extension] != 'xml' 
      attrs = article.attributes
      created = Time.parse(attrs[:created_at])
      updated = Time.parse(attrs[:updated_at])

      if created.is_a? Time
        attrs[:created_time] = created.strftime("%B %e, %Y")
        attrs[:created_timeago] = created.utc.iso8601.to_s
      end

      if updated.is_a? Time
        attrs[:updated_time] = updated.strftime("%B %e, %Y")
        attrs[:updated_timeago] = updated.utc.iso8601.to_s
      end
    end
  end
  layout 'writing_root'
  layout 'default'
end

compile '/' do
  layout 'homepage'
  layout 'default'
end

compile '*' do
  layout 'default'
end

route '*' do
  item.identifier + 'index.html'
end

# Set :ugly=true for correct indentation for <pre>.
layout '*', :haml, :format => :html5, :ugly => true
